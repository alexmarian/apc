// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: ownerships.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const getOwnership = `-- name: GetOwnership :one

SELECT id, unit_id, owner_id, association_id, start_date, end_date, is_active, registration_document, registration_date, created_at, updated_at
FROM ownerships
WHERE id = ? LIMIT 1
`

func (q *Queries) GetOwnership(ctx context.Context, id int64) (Ownership, error) {
	row := q.db.QueryRowContext(ctx, getOwnership, id)
	var i Ownership
	err := row.Scan(
		&i.ID,
		&i.UnitID,
		&i.OwnerID,
		&i.AssociationID,
		&i.StartDate,
		&i.EndDate,
		&i.IsActive,
		&i.RegistrationDocument,
		&i.RegistrationDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUnitOwnerships = `-- name: GetUnitOwnerships :many
SELECT o.id, o.unit_id, o.owner_id, o.association_id, o.start_date, o.end_date, o.is_active, o.registration_document, o.registration_date, o.created_at, o.updated_at,
       ow.name            as owner_name,
       ow.normalized_name as owner_normalized_name,
       ow.identification_number
FROM ownerships o,
     owners ow
WHERE o.owner_id = ow.id
  AND o.unit_id = ?
  and o.association_id = ?
`

type GetUnitOwnershipsParams struct {
	UnitID        int64
	AssociationID int64
}

type GetUnitOwnershipsRow struct {
	ID                   int64
	UnitID               int64
	OwnerID              int64
	AssociationID        int64
	StartDate            sql.NullTime
	EndDate              sql.NullTime
	IsActive             bool
	RegistrationDocument string
	RegistrationDate     time.Time
	CreatedAt            sql.NullTime
	UpdatedAt            sql.NullTime
	OwnerName            string
	OwnerNormalizedName  string
	IdentificationNumber string
}

func (q *Queries) GetUnitOwnerships(ctx context.Context, arg GetUnitOwnershipsParams) ([]GetUnitOwnershipsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUnitOwnerships, arg.UnitID, arg.AssociationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUnitOwnershipsRow
	for rows.Next() {
		var i GetUnitOwnershipsRow
		if err := rows.Scan(
			&i.ID,
			&i.UnitID,
			&i.OwnerID,
			&i.AssociationID,
			&i.StartDate,
			&i.EndDate,
			&i.IsActive,
			&i.RegistrationDocument,
			&i.RegistrationDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OwnerName,
			&i.OwnerNormalizedName,
			&i.IdentificationNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
