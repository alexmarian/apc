// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: buildings.sql

package database

import (
	"context"
)

const getAssociationBuilding = `-- name: GetAssociationBuilding :one

SELECT id, name, address, cadastral_number, total_area, association_id, created_at, updated_at from buildings where id = ? and association_id = ?
`

type GetAssociationBuildingParams struct {
	ID            int64
	AssociationID int64
}

func (q *Queries) GetAssociationBuilding(ctx context.Context, arg GetAssociationBuildingParams) (Building, error) {
	row := q.db.QueryRowContext(ctx, getAssociationBuilding, arg.ID, arg.AssociationID)
	var i Building
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.CadastralNumber,
		&i.TotalArea,
		&i.AssociationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAssociationBuildings = `-- name: GetAssociationBuildings :many


SELECT id, name, address, cadastral_number, total_area, association_id, created_at, updated_at from buildings where association_id=?
`

func (q *Queries) GetAssociationBuildings(ctx context.Context, associationID int64) ([]Building, error) {
	rows, err := q.db.QueryContext(ctx, getAssociationBuildings, associationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Building
	for rows.Next() {
		var i Building
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.CadastralNumber,
			&i.TotalArea,
			&i.AssociationID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
