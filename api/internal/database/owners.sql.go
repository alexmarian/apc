// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: owners.sql

package database

import (
	"context"
)

const getAssociationOwner = `-- name: GetAssociationOwner :one

SELECT id, name, normalized_name, identification_number, contact_phone, contact_email, first_detected_at, association_id, created_at, updated_at
FROM owners
WHERE owners.id = ? and owners.association_id=?
`

type GetAssociationOwnerParams struct {
	ID            int64
	AssociationID int64
}

func (q *Queries) GetAssociationOwner(ctx context.Context, arg GetAssociationOwnerParams) (Owner, error) {
	row := q.db.QueryRowContext(ctx, getAssociationOwner, arg.ID, arg.AssociationID)
	var i Owner
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.NormalizedName,
		&i.IdentificationNumber,
		&i.ContactPhone,
		&i.ContactEmail,
		&i.FirstDetectedAt,
		&i.AssociationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAssociationOwners = `-- name: GetAssociationOwners :many

SELECT id, name, normalized_name, identification_number, contact_phone, contact_email, first_detected_at, association_id, created_at, updated_at
FROM owners
WHERE owners.association_id = ?
`

func (q *Queries) GetAssociationOwners(ctx context.Context, associationID int64) ([]Owner, error) {
	rows, err := q.db.QueryContext(ctx, getAssociationOwners, associationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Owner
	for rows.Next() {
		var i Owner
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.NormalizedName,
			&i.IdentificationNumber,
			&i.ContactPhone,
			&i.ContactEmail,
			&i.FirstDetectedAt,
			&i.AssociationID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnitOwners = `-- name: GetUnitOwners :many
SELECT owners.id,
       owners.name,
       owners.normalized_name,
       owners.identification_number,
       owners.contact_phone,
       owners.contact_email,
       owners.first_detected_at,
       owners.association_id,
       owners.created_at,
       owners.updated_at
FROM owners,
     ownerships
WHERE owners.id = ownerships.owner_id
  AND ownerships.unit_id = ? and ownerships.association_id = ?
`

type GetUnitOwnersParams struct {
	UnitID        int64
	AssociationID int64
}

func (q *Queries) GetUnitOwners(ctx context.Context, arg GetUnitOwnersParams) ([]Owner, error) {
	rows, err := q.db.QueryContext(ctx, getUnitOwners, arg.UnitID, arg.AssociationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Owner
	for rows.Next() {
		var i Owner
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.NormalizedName,
			&i.IdentificationNumber,
			&i.ContactPhone,
			&i.ContactEmail,
			&i.FirstDetectedAt,
			&i.AssociationID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAssociationOwner = `-- name: UpdateAssociationOwner :exec


UPDATE owners
SET name                  = ?,
    normalized_name       = ?,
    identification_number = ?,
    contact_phone         = ?,
    contact_email         = ?,
    updated_at            = datetime()
WHERE id = ? AND association_id = ?
`

type UpdateAssociationOwnerParams struct {
	Name                 string
	NormalizedName       string
	IdentificationNumber string
	ContactPhone         string
	ContactEmail         string
	ID                   int64
	AssociationID        int64
}

func (q *Queries) UpdateAssociationOwner(ctx context.Context, arg UpdateAssociationOwnerParams) error {
	_, err := q.db.ExecContext(ctx, updateAssociationOwner,
		arg.Name,
		arg.NormalizedName,
		arg.IdentificationNumber,
		arg.ContactPhone,
		arg.ContactEmail,
		arg.ID,
		arg.AssociationID,
	)
	return err
}
