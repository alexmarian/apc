// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (login, password_hash, topt_secret, is_admin)
VALUES (?,
        ?, ?, ?) RETURNING id, login, password_hash, topt_secret, is_admin, created_at, updated_at
`

type CreateUserParams struct {
	Login        string
	PasswordHash string
	ToptSecret   string
	IsAdmin      bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Login,
		arg.PasswordHash,
		arg.ToptSecret,
		arg.IsAdmin,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.PasswordHash,
		&i.ToptSecret,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE
FROM users
`

func (q *Queries) DeleteUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUsers)
	return err
}

const getUserByLogin = `-- name: GetUserByLogin :one
SELECT id, login, password_hash, topt_secret, is_admin, created_at, updated_at
FROM users
where login = ?
`

func (q *Queries) GetUserByLogin(ctx context.Context, login string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByLogin, login)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.PasswordHash,
		&i.ToptSecret,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserEmailAndPassword = `-- name: UpdateUserEmailAndPassword :one
UPDATE users
set password_hash = ?,
    topt_secret   = ?,
    is_admin      = ?,
    updated_at    = NOW()
WHERE login = ? RETURNING id, login, password_hash, topt_secret, is_admin, created_at, updated_at
`

type UpdateUserEmailAndPasswordParams struct {
	PasswordHash string
	ToptSecret   string
	IsAdmin      bool
	Login        string
}

func (q *Queries) UpdateUserEmailAndPassword(ctx context.Context, arg UpdateUserEmailAndPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmailAndPassword,
		arg.PasswordHash,
		arg.ToptSecret,
		arg.IsAdmin,
		arg.Login,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.PasswordHash,
		&i.ToptSecret,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
