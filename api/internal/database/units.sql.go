// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: units.sql

package database

import (
	"context"
)

const getBuildingUnit = `-- name: GetBuildingUnit :one

SELECT id, cadastral_number, building_id, unit_number, address, entrance, area, part, unit_type, floor, room_count, created_at, updated_at from units where id = ? and building_id = ?
`

type GetBuildingUnitParams struct {
	ID         int64
	BuildingID int64
}

func (q *Queries) GetBuildingUnit(ctx context.Context, arg GetBuildingUnitParams) (Unit, error) {
	row := q.db.QueryRowContext(ctx, getBuildingUnit, arg.ID, arg.BuildingID)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.CadastralNumber,
		&i.BuildingID,
		&i.UnitNumber,
		&i.Address,
		&i.Entrance,
		&i.Area,
		&i.Part,
		&i.UnitType,
		&i.Floor,
		&i.RoomCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBuildingUnits = `-- name: GetBuildingUnits :many


SELECT id, cadastral_number, building_id, unit_number, address, entrance, area, part, unit_type, floor, room_count, created_at, updated_at from units where building_id=?
`

func (q *Queries) GetBuildingUnits(ctx context.Context, buildingID int64) ([]Unit, error) {
	rows, err := q.db.QueryContext(ctx, getBuildingUnits, buildingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Unit
	for rows.Next() {
		var i Unit
		if err := rows.Scan(
			&i.ID,
			&i.CadastralNumber,
			&i.BuildingID,
			&i.UnitNumber,
			&i.Address,
			&i.Entrance,
			&i.Area,
			&i.Part,
			&i.UnitType,
			&i.Floor,
			&i.RoomCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBuildingUnitById = `-- name: UpdateBuildingUnitById :exec


UPDATE units
SET unit_number = ?, address = ?, entrance = ?, unit_type = ?, floor = ?, room_count = ?, updated_at = datetime()
WHERE id = ? and building_id = ?
`

type UpdateBuildingUnitByIdParams struct {
	UnitNumber string
	Address    string
	Entrance   int64
	UnitType   string
	Floor      int64
	RoomCount  int64
	ID         int64
	BuildingID int64
}

func (q *Queries) UpdateBuildingUnitById(ctx context.Context, arg UpdateBuildingUnitByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateBuildingUnitById,
		arg.UnitNumber,
		arg.Address,
		arg.Entrance,
		arg.UnitType,
		arg.Floor,
		arg.RoomCount,
		arg.ID,
		arg.BuildingID,
	)
	return err
}
