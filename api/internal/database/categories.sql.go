// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: categories.sql

package database

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (type, family, name, association_id)
VALUES (?, ?, ?, ?) RETURNING id, type, family, name, is_deleted, association_id, created_at, updated_at
`

type CreateCategoryParams struct {
	Type          string
	Family        string
	Name          string
	AssociationID int64
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory,
		arg.Type,
		arg.Family,
		arg.Name,
		arg.AssociationID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Family,
		&i.Name,
		&i.IsDeleted,
		&i.AssociationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivateCategory = `-- name: DeactivateCategory :exec
UPDATE categories
SET is_deleted = TRUE,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) DeactivateCategory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deactivateCategory, id)
	return err
}

const getActiveCategories = `-- name: GetActiveCategories :many
SELECT id, type, family, name, is_deleted, association_id, created_at, updated_at
FROM categories
WHERE association_id = ?
  AND is_deleted = FALSE
ORDER BY type, family, name
`

// When retrieving categories, filter out deleted ones
func (q *Queries) GetActiveCategories(ctx context.Context, associationID int64) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getActiveCategories, associationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Family,
			&i.Name,
			&i.IsDeleted,
			&i.AssociationID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoriesForDropdown = `-- name: GetCategoriesForDropdown :many
SELECT id, name
FROM categories
WHERE association_id = ?
  AND is_deleted = FALSE
ORDER BY name
`

type GetCategoriesForDropdownRow struct {
	ID   int64
	Name string
}

// When retrieving categories for dropdown lists, filter out deleted ones
func (q *Queries) GetCategoriesForDropdown(ctx context.Context, associationID int64) ([]GetCategoriesForDropdownRow, error) {
	rows, err := q.db.QueryContext(ctx, getCategoriesForDropdown, associationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategoriesForDropdownRow
	for rows.Next() {
		var i GetCategoriesForDropdownRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT id, type, family, name, is_deleted, association_id, created_at, updated_at
FROM categories
WHERE id = ? LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Family,
		&i.Name,
		&i.IsDeleted,
		&i.AssociationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const isCategoryActive = `-- name: IsCategoryActive :one
SELECT EXISTS(SELECT 1
              FROM categories
              WHERE id = ?
                AND is_deleted = FALSE) as is_active
`

// In all expense endpoints, validate that the category is not deleted
func (q *Queries) IsCategoryActive(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, isCategoryActive, id)
	var is_active int64
	err := row.Scan(&is_active)
	return is_active, err
}
