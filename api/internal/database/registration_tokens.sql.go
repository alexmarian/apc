// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: registration_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createRegistrationToken = `-- name: CreateRegistrationToken :one
INSERT INTO registration_tokens (
    token,
    created_by,
    expires_at,
    description,
    is_admin
) VALUES (?, ?, ?, ?, ?)
    RETURNING token, created_by, created_at, expires_at, used_at, used_by, revoked_at, revoked_by, description, is_admin
`

type CreateRegistrationTokenParams struct {
	Token       string
	CreatedBy   string
	ExpiresAt   time.Time
	Description string
	IsAdmin     bool
}

func (q *Queries) CreateRegistrationToken(ctx context.Context, arg CreateRegistrationTokenParams) (RegistrationToken, error) {
	row := q.db.QueryRowContext(ctx, createRegistrationToken,
		arg.Token,
		arg.CreatedBy,
		arg.ExpiresAt,
		arg.Description,
		arg.IsAdmin,
	)
	var i RegistrationToken
	err := row.Scan(
		&i.Token,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.UsedAt,
		&i.UsedBy,
		&i.RevokedAt,
		&i.RevokedBy,
		&i.Description,
		&i.IsAdmin,
	)
	return i, err
}

const getAllRegistrationTokens = `-- name: GetAllRegistrationTokens :many
SELECT token, created_by, created_at, expires_at, used_at, used_by, revoked_at, revoked_by, description, is_admin
FROM registration_tokens
ORDER BY created_at DESC
`

func (q *Queries) GetAllRegistrationTokens(ctx context.Context) ([]RegistrationToken, error) {
	rows, err := q.db.QueryContext(ctx, getAllRegistrationTokens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RegistrationToken
	for rows.Next() {
		var i RegistrationToken
		if err := rows.Scan(
			&i.Token,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.UsedAt,
			&i.UsedBy,
			&i.RevokedAt,
			&i.RevokedBy,
			&i.Description,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRegistrationTokensStatus = `-- name: GetRegistrationTokensStatus :many
SELECT
    token,
    created_by,
    created_at,
    expires_at,
    CASE
        WHEN used_at IS NOT NULL THEN 'Used'
        WHEN revoked_at IS NOT NULL THEN 'Revoked'
        WHEN expires_at < datetime('now') THEN 'Expired'
        ELSE 'Valid'
        END as status,
    used_at,
    used_by,
    revoked_at,
    revoked_by,
    description,
    is_admin
FROM registration_tokens
ORDER BY created_at DESC
`

type GetRegistrationTokensStatusRow struct {
	Token       string
	CreatedBy   string
	CreatedAt   time.Time
	ExpiresAt   time.Time
	Status      string
	UsedAt      sql.NullTime
	UsedBy      sql.NullString
	RevokedAt   sql.NullTime
	RevokedBy   sql.NullString
	Description string
	IsAdmin     bool
}

func (q *Queries) GetRegistrationTokensStatus(ctx context.Context) ([]GetRegistrationTokensStatusRow, error) {
	rows, err := q.db.QueryContext(ctx, getRegistrationTokensStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRegistrationTokensStatusRow
	for rows.Next() {
		var i GetRegistrationTokensStatusRow
		if err := rows.Scan(
			&i.Token,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.Status,
			&i.UsedAt,
			&i.UsedBy,
			&i.RevokedAt,
			&i.RevokedBy,
			&i.Description,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidRegistrationToken = `-- name: GetValidRegistrationToken :one
SELECT token, created_by, created_at, expires_at, used_at, used_by, revoked_at, revoked_by, description, is_admin
FROM registration_tokens
WHERE token = ?
  AND used_at IS NULL
  AND revoked_at IS NULL
  AND expires_at > datetime('now')
    LIMIT 1
`

func (q *Queries) GetValidRegistrationToken(ctx context.Context, token string) (RegistrationToken, error) {
	row := q.db.QueryRowContext(ctx, getValidRegistrationToken, token)
	var i RegistrationToken
	err := row.Scan(
		&i.Token,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.UsedAt,
		&i.UsedBy,
		&i.RevokedAt,
		&i.RevokedBy,
		&i.Description,
		&i.IsAdmin,
	)
	return i, err
}

const revokeRegistrationToken = `-- name: RevokeRegistrationToken :exec
UPDATE registration_tokens
SET revoked_at = datetime('now'),
    revoked_by = ?
WHERE token = ?
  AND used_at IS NULL
  AND revoked_at IS NULL
`

type RevokeRegistrationTokenParams struct {
	RevokedBy sql.NullString
	Token     string
}

func (q *Queries) RevokeRegistrationToken(ctx context.Context, arg RevokeRegistrationTokenParams) error {
	_, err := q.db.ExecContext(ctx, revokeRegistrationToken, arg.RevokedBy, arg.Token)
	return err
}

const useRegistrationToken = `-- name: UseRegistrationToken :exec
UPDATE registration_tokens
SET used_at = datetime('now'),
    used_by = ?
WHERE token = ?
  AND used_at IS NULL
  AND revoked_at IS NULL
  AND expires_at > datetime('now')
`

type UseRegistrationTokenParams struct {
	UsedBy sql.NullString
	Token  string
}

func (q *Queries) UseRegistrationToken(ctx context.Context, arg UseRegistrationTokenParams) error {
	_, err := q.db.ExecContext(ctx, useRegistrationToken, arg.UsedBy, arg.Token)
	return err
}
