// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accounts.sql

package database

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (number, destination, description, association_id)
VALUES (?, ?, ?, ?)
    RETURNING id, number, destination, description, association_id, is_active, created_at, updated_at
`

type CreateAccountParams struct {
	Number        string
	Destination   string
	Description   string
	AssociationID int64
}

type CreateAccountRow struct {
	ID            int64
	Number        string
	Destination   string
	Description   string
	AssociationID int64
	IsActive      bool
	CreatedAt     sql.NullTime
	UpdatedAt     sql.NullTime
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (CreateAccountRow, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Number,
		arg.Destination,
		arg.Description,
		arg.AssociationID,
	)
	var i CreateAccountRow
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.Destination,
		&i.Description,
		&i.AssociationID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const disableAccount = `-- name: DisableAccount :exec
UPDATE accounts
SET is_active = FALSE,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ? AND association_id = ?
`

type DisableAccountParams struct {
	ID            int64
	AssociationID int64
}

func (q *Queries) DisableAccount(ctx context.Context, arg DisableAccountParams) error {
	_, err := q.db.ExecContext(ctx, disableAccount, arg.ID, arg.AssociationID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, number, destination, description, association_id, is_active, created_at, updated_at
FROM accounts
WHERE id = ? LIMIT 1
`

type GetAccountRow struct {
	ID            int64
	Number        string
	Destination   string
	Description   string
	AssociationID int64
	IsActive      bool
	CreatedAt     sql.NullTime
	UpdatedAt     sql.NullTime
}

func (q *Queries) GetAccount(ctx context.Context, id int64) (GetAccountRow, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i GetAccountRow
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.Destination,
		&i.Description,
		&i.AssociationID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAssociationAccounts = `-- name: GetAssociationAccounts :many
SELECT id, number, destination, description, association_id, is_active, created_at, updated_at
FROM accounts
WHERE association_id = ?
`

type GetAssociationAccountsRow struct {
	ID            int64
	Number        string
	Destination   string
	Description   string
	AssociationID int64
	IsActive      bool
	CreatedAt     sql.NullTime
	UpdatedAt     sql.NullTime
}

func (q *Queries) GetAssociationAccounts(ctx context.Context, associationID int64) ([]GetAssociationAccountsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAssociationAccounts, associationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAssociationAccountsRow
	for rows.Next() {
		var i GetAssociationAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Number,
			&i.Destination,
			&i.Description,
			&i.AssociationID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET number = ?,
    destination = ?,
    description = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ? AND association_id = ?
    RETURNING id, number, destination, description, association_id, is_active, created_at, updated_at
`

type UpdateAccountParams struct {
	Number        string
	Destination   string
	Description   string
	ID            int64
	AssociationID int64
}

type UpdateAccountRow struct {
	ID            int64
	Number        string
	Destination   string
	Description   string
	AssociationID int64
	IsActive      bool
	CreatedAt     sql.NullTime
	UpdatedAt     sql.NullTime
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (UpdateAccountRow, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.Number,
		arg.Destination,
		arg.Description,
		arg.ID,
		arg.AssociationID,
	)
	var i UpdateAccountRow
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.Destination,
		&i.Description,
		&i.AssociationID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
